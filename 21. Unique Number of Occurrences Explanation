My solution is designed to check whether the number of occurrences of each value in the given array `arr` is unique or not. It uses a HashMap to store the frequencies of each value and a HashSet to keep track of unique frequencies.

Here's the step-by-step explanation of the approach:

1. **Initialize Data Structures:**
   - Create a HashMap called `freqMap` to store the frequencies of each value in the array.
   - Create a HashSet called `unique` to keep track of unique frequencies.

2. **Calculate Frequencies:**
   - Use a for-each loop to iterate through the elements of the array `arr`.
   - For each element `val`, update its frequency in the `freqMap` by using the `getOrDefault` method. If the key is not present, it initializes the count to 0, otherwise, it retrieves the current count.
   ```java
   freqMap.put(val, freqMap.getOrDefault(val, 0) + 1);
   ```

3. **Check for Unique Occurrences:**
   - Iterate through the values (frequencies) stored in the `freqMap`.
   - For each frequency, check whether it already exists in the `unique` HashSet. If it does, return `false` as it means there is a non-unique occurrence.
   - If the frequency is not in the `unique` HashSet, add it to the HashSet.

4. **Return Result:**
   - If the loop completes without finding any non-unique occurrences, return `true` as all occurrences are unique.

The use of `getOrDefault` simplifies the code by avoiding the need for explicit if-else statements to check whether a key is present in the HashMap.

The time complexity of this solution is O(N), where N is the length of the input array `arr`. This is because the code iterates through the array once. The space complexity is O(N) as well, considering the worst case where all elements in `arr` are distinct.
