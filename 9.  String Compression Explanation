My approach is an implementation of a string compression algorithm. The goal is to compress a character array `chars` by replacing consecutive repeating characters with the character followed by the count of its repetitions. The compressed string should be written back into the original array, and the function should return the length of the compressed string.

Here's a step-by-step explanation of the approach:

1. **Initialization:**
   - Initialize variables `i` and `count` to 1. `i` represents the current index being processed, and `count` keeps track of the consecutive repeating characters.
   - Initialize a `StringBuilder` named `sb` to build the compressed string. Append the first character of the array to `sb`.

2. **Compression Loop:**
   - The code then enters a `while` loop that iterates through the array starting from index 1.
   - For each index `i`, it checks if the current character `chars[i]` is equal to the previous character `chars[i-1]`.
   - If they are equal, it means there is a consecutive repeating character, and the `count` is incremented.
   - If they are not equal, it means a new character is encountered. In this case:
     - If the `count` is greater than 1, append the count to the `StringBuilder`.
     - Append the new character `chars[i]` to the `StringBuilder`.
     - Reset the `count` to 1.

3. **Handling the Last Sequence:**
   - After the loop, there might be a remaining sequence of repeating characters. If `count` is greater than 1, append it to the `StringBuilder`.

4. **Writing Back to Original Array:**
   - Iterate through the characters in the `StringBuilder` and write them back to the original `chars` array.

5. **Returning the Length:**
   - Return the length of the compressed string, which is the length of the `StringBuilder`.

The algorithm compresses the string in-place, modifying the original array. The time complexity of this algorithm is O(n), where n is the length of the input array `chars`, as it makes a single pass through the array. The space complexity is O(1) because the compression is done in-place, and the `StringBuilder` is used for temporary storage.
