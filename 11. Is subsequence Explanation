Determine whether a given string `s` is a subsequence of another string `t`. A subsequence is a sequence of characters that appears in the same order in both strings, but not necessarily consecutively.

I have solved this problem by following below steps:

1. The method `isSubsequence` takes two strings, `s` and `t`, as input.

2. Two pointers, `i` and `j`, are initialized to 0. These pointers represent the current positions in the strings `s` and `t`, respectively.

3. The while loop continues until the pointer `j` reaches the end of the string `t`.

4. Inside the loop, there is a conditional statement that checks whether the character at index `i` in `s` matches the character at index `j` in `t`.

   - If the characters match, it means that a character of the subsequence has been found, so both `i` and `j` are incremented.
   
   - If the characters do not match, only `j` is incremented, indicating that the current character in `t` does not contribute to the subsequence.

   - The loop continues until either the subsequence `s` is completely found (i.e., `i` reaches the end of `s`) or the end of `t` is reached.

5. After exiting the loop, the code checks whether the subsequence `s` has been fully found by comparing whether `i` is equal to the length of `s`.

6. If `i` is equal to the length of `s`, it means that the entire subsequence has been found in `t`, and the method returns `true`. Otherwise, it returns `false`.

The time complexity of this algorithm is O(min(m, n)), where m and n are the lengths of strings `s` and `t` respectively. The space complexity is O(1), as the algorithm uses only a constant amount of extra space.
